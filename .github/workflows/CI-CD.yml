name: CI/CD_Pipeline

on:
  push:

    branches: [ main, release, development] # Branches that trigger the pipeline when a push occurs
  pull_request:
    branches: [ main, release, development] # Branches that trigger the pipeline when a pull request occurs

jobs:
  preflight:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |

          echo "Validando mensagens de commit..."
          
            REGEX="^((Merge.)|(Revert.)|((build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\(.\))?!?: .))"
          
            BASE_TAG=your-base-tag
            if git rev-parse $BASE_TAG >/dev/null 2>&1; then
                COMMIT_RANGE=$BASE_TAG..HEAD
            else
                COMMIT_RANGE=$(git rev-list --max-parents=0 HEAD)
            fi
          
            for COMMIT_HASH in $(git rev-list --no-merges $COMMIT_RANGE); do
                MESSAGE=$(git log --format=%B -n 1 $COMMIT_HASH)
                echo "Commit Message: ${MESSAGE}"
                if ! [[ "$MESSAGE" =~ $REGEX ]]; then
                    echo >&2 "ERROR: Commit aborted for not following the Conventional Commit standard."
                    exit 1
                else
                    echo "Valid commit message."
                fi
           done

  build:
    runs-on: ubuntu-latest
    needs: preflight
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java and Maven
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'
          maven-version: '4.0.0'

      - name: Run Maven
        run: mvn test

      - name: Run Maven
        run: mvn test jacoco:report


  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: mvn test

  versions:
    if: github.ref == 'refs/heads/release' # This job is run if the GitHub reference is 'refs/heads/release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configuração do Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
      - name: Release
        run: |
          GENERATE_VERSION=$1
          echo "Generate version: $GENERATE_VERSION"

          PREVENT_REMOVE_FILE=$2

          LAST_TAG=$(git describe --tags --abbrev=0 --always)
          echo "Last tag: #$LAST_TAG#"
          PATTERN="^[0-9]+\.[0-9]+\.[0-9]+$"

          increment_version() {
              local version=$1
              local increment=$2
              local major=$(echo $version | cut -d. -f1)
              local minor=$(echo $version | cut -d. -f2)
              local patch=$(echo $version | cut -d. -f3)

              if [ "$increment" == "major" ]; then
                  major=$((major + 1))
                  minor=0
                  patch=0
              elif [ "$increment" == "minor" ]; then
                  minor=$((minor + 1))
                  patch=0
              elif [ "$increment" == "patch" ]; then
                  patch=$((patch + 1))
              fi

              echo "${major}.${minor}.${patch}"
          }

          push_newversion() {
              local new_version=$1
              if [ "$GENERATE_VERSION" == "true" ]; then
                  echo "Generating new version..."
                  git tag $new_version
                  git push origin $new_version
              else
                  echo "To generate a new version, you must send the argument \"true\""
              fi
          }

          create_file() {
              local with_range=$1
              if [ -s messages.txt ]; then
                  return 1
              fi
              if [ "$with_range" == "true" ]; then
                  git log $LAST_TAG..HEAD --no-decorate --pretty=format:"%s" > messages.txt
              else
                  git log --no-decorate --pretty=format:"%s" > messages.txt
              fi
          }

          get_commit_range() {
              if [[ $LAST_TAG =~ $PATTERN ]]; then
                  create_file true
              else
                  create_file
                  LAST_TAG="0.0.0"
              fi
              echo " " >> messages.txt
          }

          start() {
              get_commit_range
              new_version=$LAST_TAG
              increment_type=""

              while read message; do
                  if [[ $message =~ (([a-z]+)(\(.+\))?\!:)|(BREAKING CHANGE:) ]]; then
                      increment_type="major"
                      break
                  elif [[ $message =~ (^(feat|style)(\(.+\))?:) ]]; then
                      if [ -z "$increment_type" ] || [ "$increment_type" == "patch" ]; then
                          increment_type="minor"
                      fi
                  elif [[ $message =~ ^((fix|build|perf|refactor|revert)(\(.+\))?:) ]]; then
                      if [ -z "$increment_type" ]; then
                          increment_type="patch"
                      fi
                  fi
              done < messages.txt

              if [ -n "$increment_type" ]; then
                  new_version=$(increment_version $LAST_TAG $increment_type)
                  echo "New version: $new_version"
                  push_newversion $new_version
              else
                  echo "No changes requiring a version increment."
              fi
          }

          start

          if [ -z "$PREVENT_REMOVE_FILE" ]; then
              rm -f messages.txt
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}